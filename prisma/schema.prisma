datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Expense Expense[]
  Income Income[]
  Budget Budget[]
  Notification Notification[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
 model Expense {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    String   // e.g., tuition, rent, groceries
  amount      Int
  isRecurring Boolean  @default(false)
  recurringFrequency String? // e.g., "monthly", "weekly"
  description String?
  date        DateTime @default(now())
}

model Income {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  source      String   // e.g., scholarship, part-time job
  amount      Int
  isRecurring Boolean  @default(false)
  recurringFrequency String? // e.g., "monthly", "weekly"
  description String?
  date        DateTime @default(now())
}

model Budget {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  period      String   // e.g., "weekly", "monthly", "term"
  totalLimit  Int
  spent       Int    @default(0)
  categories  BudgetCategory[]
  startDate   DateTime
  endDate     DateTime
}

model BudgetCategory {
  id          String   @id @default(uuid())
  budgetId    String
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category    String
  limit       Int
  spent       Int    @default(0)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // e.g., "Budget Limit Alert", "Upcoming Payment"
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

 

